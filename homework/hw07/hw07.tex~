\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{amsmath}
\usepackage{clrscode3e}

\title{CSCI 305, Homework \# 8}
\author{YOUR NAME HERE}
\date{Due date:  Midnight, Tuesday, June 5}

\renewcommand{\theenumi}{\alph{enumi}}

\begin{document}

\maketitle

\begin{description}
\item[Binary search trees with equal keys.]  This is problem 12-1
  in the book.

  Equal keys pose a problem for the implementation of binary
  search trees.
  \begin{enumerate}
  \item What is the asymptotic performance of \textsc{Tree-Insert} when
    used to insert $n$ items with identical keys into an initially empty
    binary search tree?
  \end{enumerate}
  We propose to improve \textsc{Tree-Insert} by testing before line 5
  to determine whether $\attrib{z}{key} \isequal\attrib{x}{key}$ 
  and by testing before line 11 to determine whether
  $\attrib{z}{key} \isequal\attrib{y}{key}$.

  If equality holds, we
  implement one of the following strategies.  For each strategy, find
  the asymptotic performance of inserting $n$ items with identical
  keys into an initially empty binary search tree.  (The strategies
  are described for line 5, in which we compare the keys of $z$ and
  $x$.  Substitute $y$ for $x$ to arrive at the strategies for line
  11.) 
  \begin{enumerate}\setcounter{enumi}{1}
  \item Keep a boolean flag $\attrib{x}{b}$ at node $x$, and set $x$
    to either $\attrib{x}{left}$ or $\attrib{x}{right}$ based on the
    value of $\attrib{x}{b}$, which alternates between $\const{false}$
    and $\const{true}$ each time we visit $x$ while inserting a node
    with the same key as $x$. 
\item Keep a list of nodes with equal keys at $x$, and insert $z$ into
  the list.
  \item Randomly set $x$ to either $\attrib{x}{left}$ or
    $\attrib{x}{right}$.  (Give the worst-case performance and
    informally derive the expected running time.)
  \end{enumerate}
  

\end{description}


\end{document}
