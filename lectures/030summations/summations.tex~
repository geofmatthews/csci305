\documentclass{article}
\usepackage{fullpage}

\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{color}
\usepackage{alltt}
\newcommand{\red}[1]{{\color{red}#1}}
\newcommand{\cyan}[1]{{\color{cyan}#1}}
\newcommand{\blue}[1]{{\color{blue}#1}}
\newcommand{\magenta}[1]{{\color{magenta}#1}}
\newcommand{\yellow}[1]{{\color{yellow}#1}}
\newcommand{\green}[1]{{\color{green}#1}}
 
\newcommand{\bkt}[1]{\langle \mbox{ #1 } \rangle}
\newcommand{\br}{\mbox{~}|\mbox{~}}
 
\newcommand{\ns}[1]{\newpage {\bf #1}}
 
\begin{document}
 
\huge

{\bf Summation Facts}
\begin{eqnarray*}
\sum_{i=m}^n c &=& (n - m + 1)c 
\\\\
\sum_{i=m}^n ca_i &=& c\sum_{i=m}^n a_i 
\\\\
\sum_{i=m}^n (a_i + b_i) &=& \sum_{i=m}^n a_i + \sum_{i=m}^n + b_i
\\\\
\sum_{i=m}^n a_{i+k} &=& \sum_{i=m+k}^{n+k} a_{i}
\\\\
\sum_{i=m}^n a_{i}x^{i+k} &=& x^k \sum_{i=m}^{n} a_{i}x^i
\\\\
\sum_{i=m}^n (a_i - a_{i-1}) &=& a_n - a_{m-1}
\end{eqnarray*}

\ns{Sum of 1}
\begin{eqnarray*}
  \sum_{i=1}^n 1 &=& \sum_{i=1}^n (i - (i - 1))
  \\
  &=& n - 0
  \\
  &=& n
\end{eqnarray*}

\ns{Sum of $i$}
\[
\begin{array}{cccccccccc}
 & \sum_{i=1}^n i &=& 1 &+& 2 &+& \ldots  &+& n
\\
+&  \sum_{i=1}^n i  &=& n &+& n-1 &+& \ldots  &+& 1
\\
\multicolumn{10}{c}{\hrulefill}
\\
 &&=& n+1 &+& n+1 &+& \ldots  &+& n+1
  \\
 & &=& \multicolumn{3}{l}{n(n+1)}
  \\\\\\
\Rightarrow&  \sum_{i=1}^n i &=& \multicolumn{3}{l}{{n(n+1)}/{2}}
\end{array}
\]

\ns{Sum of $i$}
\begin{eqnarray*}
  n^2 &=& n^2 - 0^2
  \\
  &=& \sum_{i=1}^n (i^2 - (i-1)^2)
  \\
  &=& \sum_{i=1}^n (2i - 1)
  \\
  &=& 2\sum_{i=1}^n i - \sum_{i=1}^n 1
  \\
  &=& 2\sum_{i=1}^n i - n
  \\\\\\
  &\Rightarrow & \sum_{i=1}^n i = n(n+1)/2
\end{eqnarray*}

\ns{Sum of $i$}
\begin{eqnarray*}
\sum_{i=1}^{n+1}i^2 &=& \sum_{i=1}^{n}i^2 + (n+1)^2 \\
                 &=& \sum_{i=1}^{n}i^2 + n^2 + 2n + 1 \\
\sum_{i=1}^{n+1}i^2 &=& \sum_{i=0}^{n}(i+1)^2 \\
                 &=& \sum_{i=0}^{n}(i^2 + 2i + 1) \\
                 &=& \sum_{i=0}^{n}i^2 + \sum_{i=0}^{n}2i + \sum_{i=0}^{n}1 \\
                 &=& \sum_{i=0}^{n}i^2 + \sum_{i=0}^{n}2i + n+1 \\
\sum_{i=1}^{n}i^2 + n^2 + 2n + 1 
    &=& \sum_{i=0}^{n}i^2 + \sum_{i=0}^{n}2i + n+1 \\
 n^2 + 2n + 1  &=&  \sum_{i=0}^{n}2i + n+1 \\
 \sum_{i=0}^{n}2i &=& n^2 + n \\
 \sum_{i=0}^{n}i &=& n(n+1)/2
\end{eqnarray*}

\ns{Sum of Odd Numbers}
\begin{eqnarray*}
1 + 3 + \ldots + (2n+1) &=& \sum_{i=0}^n (2i+1) 
\\
&=& \sum_{i=0}^n 2i + \sum_{i=0}^n 1
\\
&=& 2\sum_{i=0}^n i + (n+1)
\\
&=& 2n(n+1)/2 + (n+1)
\\
&=& (n+1)^2
\end{eqnarray*}

\ns{Geometric Sum}
\begin{eqnarray*}
  S_n &=& 1 + a + a^2 + \ldots + a^n
  \\
  &=& \sum_{i=0}^n a^i
  \\
  S_{n+1} &=& (1 + a + a^2 + \ldots + a^n) + a^{n+1}
  \\
  &=& S_{n} + a^{n+1}
  \\
  S_{n+1} &=& 1 + (a + a^2 + \ldots + a^n + a^{n+1})
  \\
  &=& 1 + a(1 + a + a^2  +  \ldots + a^n)
  \\
  &=& 1 + aS_n
  \\
  &\Rightarrow&
  \\
  S_n + a^{n+1} &=& 1 + aS_n
  \\
  &\Rightarrow&
  \\
  \sum_{i=0}^n a^i &=& S_n
  \\
  &=& \frac{a^{n+1} - 1}{a-1}
\end{eqnarray*}


\ns{Geometric Sum}
\begin{eqnarray*}
  (a-1)\sum_{i=0}^n a^i &=& \sum_{i=0}^n (a^{i+1} - a^i)
  \\
  &=&  \sum_{j=1}^{n+1} (a^j - a^{j-1})
  \\
  &=& a^{n+1} - a^0
  \\
  &=& a^{n+1} - 1
\end{eqnarray*}

Also do division: \[\frac{a^{n+1}-1}{a-1}\]

\ns{Sum of $ia^i$}
\begin{eqnarray*}
  S_n = \sum_{i=1}^n ia^i 
    &=& 1+a+2a^2+\ldots + na^n
  \\
  S_{n+1} = \sum_{i=1}^{n+1} ia^i
  &=&  \sum_{i=1}^n ia^i + (n+1)a^{n+1}
  \\
  &=& S_n + (n+1)a^{n+1}
  \\
  S_{n+1} = \sum_{i=1}^{n+1} ia^i
  &=& \sum_{i=0}^{n} (i+1)a^{i+1}
  \\
  &=& \sum_{i=0}^{n} ia^{i+1} + \sum_{i=0}^{n} a^{i+1}
  \\
  &=& a\sum_{i=0}^{n} ia^{i} + a\sum_{i=0}^{n} a^{i}
  \\
  &=& aS_n + a(a^{n+1} - 1)/(a-1)
  \\
  &\Rightarrow&
  \\
  S_n + (n+1)a^{n+1}  &=& aS_n + a(a^{n+1} - 1)/(a-1)
  \\
  &\Rightarrow&
  \\
  S_n  &=& \frac{a - (n+1)a^{n+1} + na^{n+2}}{(a-1)^2}
\end{eqnarray*}
  
\ns{Sum of $ia^{i-1}$}

Don't forget your calculus!
\begin{eqnarray*}
  \frac{d}{dx}(f+g) &=& \frac{df}{dx} + \frac{dg}{dx}
  \\\\\\
  \sum_{i=0}^n ia^{i-1} &=&   \sum_{i=0}^n \frac{d}{da} (a^i)
  \\
  &=&   \frac{d}{da}  \sum_{i=0}^n (a^i)
  \\
  &=&   \frac{d}{da} \left(  \frac{a^{n+1} - 1}{a-1} \right)
\end{eqnarray*}

\ns{Sum of $i^2$}
\begin{eqnarray*}
  \sum_{i=1}^{n+1} i^3 &=& \sum_{i=1}^n i^3 + (n+1)^3
  \\
  \sum_{i=1}^{n+1} i^3 &=&\sum_{i=0}^{n} (i+1)^3
  \\
  &=&  \sum_{i=0}^{n} (i^3 + 3i^2 + 3i +1)
  \\
  &=& \sum_{i=0}^{n} i^3 +
      \sum_{i=0}^{n} 3i^2 + 
      \sum_{i=0}^{n} 3i + 
      \sum_{i=0}^{n} 1
  \\
  &=& \sum_{i=1}^{n} i^3 +
      3\sum_{i=1}^{n} i^2 + 
      3\sum_{i=1}^{n} i + 
      (n+1)      
  \\
  &=& \sum_{i=1}^{n} i^3 +
      3\sum_{i=1}^{n} i^2 + 
      3\frac{n(n+1)}{2} +
      (n+1)
  \\\\\\
  &\Rightarrow&
  \\
  (n+1)^3 &=&       3\sum_{i=1}^{n} i^2 + 
      3\frac{n(n+1)}{2} +
      (n+1)
  \\\\\\
  &\Rightarrow&
  \\
  \sum_{i=1}^n i^2 &=& \frac{n(n+1)(2n+1)}{6}
\end{eqnarray*}

\ns{Algorithm Analysis}
\begin{verbatim}
for i := 1 to n do
  for j := 1 to i do x := x + f(x) od;
  x := x + g(x)
od
\end{verbatim}
Total number of assignments is:
\begin{eqnarray*}
\sum_{i=1}^{n} ( 1 + 1 + \sum_{j=1}^{i} (1 + 1)) &=&
\sum_{i=1}^{n} ( 2 + \sum_{j=1}^{i} 2) \\
&=&  \sum_{i=1}^{n} ( 2 + 2i) \\
&=&  \sum_{i=1}^{n}  2 +  \sum_{i=1}^{n} 2i  \\
&=&   2n +  n(n+1)  \\
&=&   n^2 + 3n
\end{eqnarray*}

\ns{Algorithm Analysis}
\begin{verbatim}
for i from 1 to n
  for j from i to n
    for k from i to j
      m = m + i + j + k
\end{verbatim}
Total number of additions is:
\begin{eqnarray*}
  \sum_{i=1}^n \sum_{j=i}^n \sum_{k=i}^j 3
  &=&
  \sum_{i=1}^n \sum_{j=i}^n 3(j - i + 1)
  \\
  &=&
  3\sum_{i=1}^n \left(\sum_{j=i}^n j - \sum_{j=i}^n i + \sum_{j=i}^n
  1\right)
  \\
  \sum_{j=i}^n 1&=& (n-i+1)
  \\
  \sum_{j=i}^n i &=& i(n-i+1)
  \\
  \sum_{j=i}^n j &=& \left(\sum_{j=1}^n j - \sum_{j=1}^{i-1} j\right)
  \\
  &=& \left(\frac{n(n+1)}{2} - \frac{(i-1)i}{2}\right)
\end{eqnarray*}


\ns{Algorithm Analysis}
\begin{verbatim}
for i from 1 to n
  for j from i to n
    for k from i to j
      m = m + i + j + k
\end{verbatim}
Total number of additions is:
\begin{eqnarray*}
  \sum_{i=1}^n \sum_{j=i}^n \sum_{k=i}^j 3
  &=&
  3\sum_{i=1}^n \left(
    \begin{array}{c}
      (n-i+1) \\+\\
      i(n-i+1) \\+\\
      {
        \left( \frac{n(n+1)}{2}  -  \frac{(i-1)i}{2}\right)}
    \end{array}
  \right)
\end{eqnarray*}

\ns{Recurrences}

\begin{eqnarray*}
  f(1) &=& 1\\
  f(n) &=& f(n/2) + 1
\end{eqnarray*}
The second equation really represents many equations, one for each $n$:
\begin{eqnarray*}
  f(n) &=& f(n/2) + 1 \\
  f(n/2) &=& f(n/2^2) + 1 \\
  f(n/2^2) &=& f(n/2^3) + 1 \\
  f(n/2^3) &=& f(n/2^4) + 1 \\ &\ldots&
\end{eqnarray*}
We can use this to expand the first equation:
\begin{eqnarray*}
  f(n) &=& f(n/2) + 1 \\
       &=& (f(n/2^2) + 1) + 1  \\
       &=& ((f(n/2^3) + 1) + 1) + 1 \\
       &=& (((f(n/2^4) + 1) + 1) + 1) + 1 \\
       &\ldots& \\
       &=& f(n/2^k) + k \\
       &=& f(1) + \log_2(n) \\
       &=& 1 + \log_2(n) \\
\end{eqnarray*}
Since, when $k = \log_2(n)$, then $2^k=n$.
     
\ns{More complicated example}
\begin{eqnarray*}
  f(1) &=& 27\\
  f(n) &=& 2f(n/4) + n
\end{eqnarray*}
\begin{eqnarray*}
  f(n) &=& 2f(n/4) + n \\
       &=& 2\left(2f(n/4^2) + \frac{n}{4}\right) + n \\
       &=& 2^2f(n/4^2) + \frac{n}{2} + n \\
       &=& 2^3f(n/4^3) + \frac{n}{2^2} + \frac{n}{2} + n \\
&\ldots& \\
       &=& 2^kf(n/4^k) + \frac{n}{2^{k-1}} + \frac{n}{2^{k-2}} + \ldots + \frac{n}{2^1} + \frac{n}{2^0} \\
       &=& 2^kf(n/4^k) + \sum_{i=0}^{k-1}\frac{n}{2^i}
       \\
       &=& 2^kf(n/4^k) + n\sum_{i=0}^{k-1}\left(\frac{1}{2}\right)^i
\end{eqnarray*}
When $k = log_4(n)$, then
\begin{eqnarray*}
  f(n) &=& 2^kf(1) + n\left(2 - \left(\frac{1}{2}\right)^{k-1}\right)\\
 &=& 2^k(27) + n\left(2 - \left(\frac{1}{2}\right)^{k-1}\right)
\end{eqnarray*}     

\ns{Algorithms}
\begin{verbatim}
doodle(n,m)
  if n > 0
    line(n,n,m,m)
    line(n,m,n,m)
    doodle(n-1,m)
\end{verbatim}
How many lines does {\tt doodle} draw?
\begin{eqnarray*}
f(0) &=& 0 \\
f(n) &=& f(n-1) + 2
\\\\
&=& (f(n-2) + 2) + 2 \\
&=& ((f(n-3) + 2) + 2) + 2 \\
&=& f(n-k) + 2k\\
&=& f(n-n) + 2n\\
&=& 2n
\end{eqnarray*}

\ns{Algorithms}
\begin{verbatim}
quibble(n)
  if n = 0
    then return 1
    else return quibble(n-1) + quibble(n-1)
\end{verbatim}
How many additions does {\tt quibble} make?
\begin{eqnarray*}
f(0) &=& 0 \\
f(n) &=& 2f(n-1) + 1
\\\\
&=& 2(2f(n-2) + 1) + 1 \\
&=& 2^2f(n-2) + 2 + 1 \\
&=& 2^2(f(n-3) + 1) + 2 + 1 \\
&=& 2^3f(n-3) + 4 + 2 + 1 \\
&=& 2^kf(n-k) + \sum_{i=0}^{k-1} 2^i \\
&=& 2^nf(n-n) + \sum_{i=0}^{n-1} 2^i \\
&=& 2^nf(0) + \sum_{i=0}^{n-1} 2^i \\
&=& 2^n - 1
\end{eqnarray*}
  
\ns{Algorithms}
\begin{alltt}
DC(L)
  if |L| > 1
    in |L|^2 steps divide L into thirds:
          L1 L2 L3
    DC(L1)
    DC(L2)
    DC(L3)
\end{alltt}
Let $n$ be {\tt |L|}.  What is the run time of {\tt DC}?
\begin{eqnarray*}
  f(1) &=& c \\
  f(n) &=& 3f(n/3) + n^2 \\\\
       &=& 3^2(f(n/3^2) + (n/3)^2) + n^2 \\
       &=& 3^2f(n/3^2) + 3(n/3)^2 + n^2 \\
       &=& 3^kf(n/3^k) + n^2\sum_{i=0}^{k-1}(1/3)^i \\
       &=& c3^k + n^2\left(\frac{1-(1/3)^k}{1-1/3}\right)
\end{eqnarray*}
where $k = \log_3(n)$.
  
\ns{Big Theta}

$f$ {\sl has the same growth rate as} $g$ means\\
there exist $m$ and $c$ and $d$
such that:
\[
c|g(n)| \leq |f(n)| \leq d|g(n)| \mbox{  for all $n \geq m$}
\]
In this case we write $f(n) = \Theta(g(n))$.
\begin{eqnarray*}
\sum_{i=1}^n i &=& \Theta(n^2) \\
\sum_{i=1}^n i^2 &=& \Theta(n^3) \\
\sum_{i=1}^n i^k &=& \Theta(n^{k+1}) \\
\sum_{i=1}^n a^i &=& \Theta(a^{n+1}) \\
\sum_{i=1}^n ia^i &=& \Theta(na^{n+1}) \\
\end{eqnarray*}
{\bf Theorem:}
\begin{eqnarray*}
\lim_{n \rightarrow \infty} \frac{f(n)}{g(n)} = c
&\Rightarrow&
f(n) = \Theta(g(n))
\end{eqnarray*}

\ns{Little Oh}

$f$ {\sl has a lower growth rate} than $g$ if
\[
\lim_{n \rightarrow \infty} \frac{f(n)}{g(n)} = 0
\]
and we write $f(n) = o (g (n))$
or $f(n) \prec g(n)$, and say $f$ is {\sl little oh} of $g$.


{\bf Theorem:}
\begin{eqnarray*}
\lim_{n \rightarrow \infty} \frac{f(n)}{g(n)} &=&
\lim_{n \rightarrow \infty} \frac{f'(n)}{g'(n)}
\end{eqnarray*}

\[
1 \prec \log n \prec n \prec n \log n \prec n^2 \prec n^3 \prec 2^n
\prec 3^n \prec n! \prec n^n
\]

\ns{Big Oh}

$f$ is {\sl bounded above} by $g$ means\\
there are $c$ and $m$ such that
\[
|f(n)| \leq c|g(n)| \mbox{  for all $n \geq m$}
\]
and we write $f(n) = O(g(n))$ and say $f$ is {\sl big oh} of $g$.


{\large Big Omega}

$f$ is {\sl bounded below} by $g$ means\\
there are $c$ and $m$ such that
\[
f(n)| \geq c|g(n)| \mbox{  for all $n \geq m$}
\]
and we write $f(n) = \Omega(g(n))$ and say $f$ is {\sl big omega} of $g$.

{\bf Theorem.} For any function $f$:
\begin{eqnarray*}
o(f(n)) \cup \Theta(f(n)) &\subset& O(f(n))
\\\\
O(f(n)) \cap \Omega(f(n)) &=& \Theta(f(n))
\end{eqnarray*}

\ns{Algorithm Strategies:  Memoization}

Don't recompute things.
\begin{alltt}
int fibo(n) {
  if (< n 2) then return 1
  else return fibo(n-1) + fibo(n-2)
}

int fibo(n) {
  if (n < 2) then return 1
  if (!precomputed[n]) then
     precomputed[n] = fibo(n-1) + fibo(n-2)
  return precomputed[n]
}
\end{alltt}

\ns{Algorithm Strategies:  Divide and Conquer}

$n/2$ is much faster than $n-1$ 

(binary search, quicksort, ...)
\begin{alltt}
int power(n, m) {
  if (m == 0) then return 1
  else return n * power(n, m-1)
  }

int power(n,m) {
  if (m == 0) then return 1
  else if (even(m)) then
    return square(power(n,m/2))
  else
    return n * power(n,m-1)
}
\end{alltt}

\ns{Return to Fibo}

Consider the following:
\[
\langle a, b \rangle \left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle b, a+b\rangle
\]



\[
\langle fib_i, fib_{i+1} \rangle \left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle fib_{i+1}, fib_{i+2}\rangle
\]

\ns{Hmmmm...}

\[
\langle 1,1 \rangle \left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle 1,2\rangle
\]
\[
\langle 1,1 \rangle 
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle 2,3\rangle
\]
\[
\langle 1,1 \rangle 
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle 3,5\rangle
\]
\[
\langle 1,1 \rangle 
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]
= \langle 5,8\rangle
\]

\ns{Hmmm...}

\[
\langle 1,1 \rangle 
\left[\begin{array}{cc}0 & 1 \\ 1 & 1 \\\end{array}\right]^n
= \langle fib_{n-1}, fib_{n}\rangle
\]

New algorithm:

  calculate $\left[\begin{array}{cc}0 & 1 \\ 1 & 1
    \\\end{array}\right]^n$ in $\log(n)$ time,\\ return lower left element.

Can calculate 1,000,000th Fibonacci number in 5 seconds,
10,000,000th in two minutes (DrScheme on 1.5Ghz).




\end{document}





